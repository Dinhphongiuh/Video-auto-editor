#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Video Resolution Changer Action
X·ª≠ l√Ω thay ƒë·ªïi ƒë·ªô ph√¢n gi·∫£i video
"""

import os
from .base_action import BaseAction


class VideoResolutionChanger(BaseAction):
    """X·ª≠ l√Ω thay ƒë·ªïi ƒë·ªô ph√¢n gi·∫£i video"""
    
    RESOLUTION_PRESETS = {
        "1": ("1920", "1080", "Full HD"),
        "2": ("1280", "720", "HD"),
        "3": ("854", "480", "SD"),
        "4": ("640", "360", "Low"),
        "5": ("custom", "custom", "T√πy ch·ªânh")
    }
    
    def execute(self, input_folder, output_folder):
        """Th·ª±c hi·ªán thay ƒë·ªïi ƒë·ªô ph√¢n gi·∫£i video"""
        # Ki·ªÉm tra th∆∞ m·ª•c
        if not self.validate_folders(input_folder, output_folder):
            return
        
        # L·∫•y danh s√°ch video
        video_files = self.get_video_files(input_folder)
        if not video_files:
            print("‚ùå Kh√¥ng t√¨m th·∫•y file video n√†o!")
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
            return
        
        print(f"\nüìê THAY ƒê·ªîI ƒê·ªò PH√ÇN GI·∫¢I")
        print(f"T√¨m th·∫•y {len(video_files)} file video")
        
        # Ch·ªçn ƒë·ªô ph√¢n gi·∫£i
        width, height = self._select_resolution()
        if not width or not height:
            return
        
        # Th·ª±c hi·ªán thay ƒë·ªïi
        print(f"\nüîÑ ƒêang thay ƒë·ªïi ƒë·ªô ph√¢n gi·∫£i th√†nh {width}x{height}...")
        print(f"S·ªë file c·∫ßn x·ª≠ l√Ω: {len(video_files)}")
        print("-" * 50)
        
        success_count = 0
        error_count = 0
        
        for i, video_file in enumerate(video_files, 1):
            filename = os.path.basename(video_file)
            name, ext = os.path.splitext(filename)
            output_file = os.path.join(output_folder, f"{name}_{width}x{height}{ext}")
            
            print(f"\n[{i}/{len(video_files)}] üìÅ X·ª≠ l√Ω: {filename}")
            print(f"  üìç Input : {video_file}")
            print(f"  üì§ Output: {output_file}")
            
            # Ki·ªÉm tra file input t·ªìn t·∫°i
            if not os.path.exists(video_file):
                print(f"  ‚ùå L·ªói: File input kh√¥ng t·ªìn t·∫°i!")
                error_count += 1
                continue
            
            try:
                # Ki·ªÉm tra tr·∫°ng th√°i tr∆∞·ªõc khi ch·∫°y
                file_size = os.path.getsize(video_file) / (1024 * 1024)  # MB
                print(f"  üìÄ K√≠ch th∆∞·ªõc file: {file_size:.2f} MB")
                print(f"  üìê ƒê·ªô ph√¢n gi·∫£i: {width}x{height}")
                
                # Ch·∫°y l·ªánh thay ƒë·ªïi ƒë·ªô ph√¢n gi·∫£i
                self.run_videoforge_command([
                    "process",
                    "-i", video_file,
                    "-o", output_file,
                    "--resolution", f"{width}x{height}"
                ])
                
                # Ki·ªÉm tra k·∫øt qu·∫£
                if os.path.exists(output_file):
                    output_size = os.path.getsize(output_file) / (1024 * 1024)
                    print(f"  ‚úÖ Th√†nh c√¥ng! K√≠ch th∆∞·ªõc output: {output_size:.2f} MB")
                    success_count += 1
                else:
                    print(f"  ‚ùå L·ªói: File output kh√¥ng ƒë∆∞·ª£c t·∫°o!")
                    error_count += 1
                    
            except Exception as e:
                print(f"  ‚ùå L·ªói: {e}")
                error_count += 1
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        self._show_results(success_count, error_count, len(video_files), width, height)
        input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
    
    def _select_resolution(self):
        """Cho ph√©p user ch·ªçn ƒë·ªô ph√¢n gi·∫£i"""
        print("\nCh·ªçn ƒë·ªô ph√¢n gi·∫£i:")
        for key, (width, height, name) in self.RESOLUTION_PRESETS.items():
            if key == "5":
                print(f"{key}. {name}")
            else:
                print(f"{key}. {width}x{height} ({name})")
        
        try:
            choice = input("Nh·∫≠p s·ªë: ").strip()
            
            if choice in self.RESOLUTION_PRESETS:
                width, height, name = self.RESOLUTION_PRESETS[choice]
                
                if choice == "5":  # T√πy ch·ªânh
                    width = input("Nh·∫≠p chi·ªÅu r·ªông: ").strip()
                    height = input("Nh·∫≠p chi·ªÅu cao: ").strip()
                    
                    # Validate input
                    try:
                        int(width)
                        int(height)
                        return width, height
                    except ValueError:
                        print("‚ùå Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá!")
                        return None, None
                
                return width, height
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
                return None, None
                
        except ValueError:
            print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
            return None, None
    
    def _show_results(self, success_count, error_count, total_count, width, height):
        """Hi·ªÉn th·ªã k·∫øt qu·∫£ x·ª≠ l√Ω"""
        print("\n" + "=" * 50)
        print(f"üèÅ K·∫øt qu·∫£ thay ƒë·ªïi ƒë·ªô ph√¢n gi·∫£i:")
        print(f"  ‚úÖ Th√†nh c√¥ng: {success_count}/{total_count}")
        print(f"  ‚ùå L·ªói: {error_count}/{total_count}")
        print(f"  üìê ƒê·ªô ph√¢n gi·∫£i: {width}x{height}")
        print("=" * 50)
