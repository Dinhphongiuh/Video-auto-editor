#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Folder Manager Action
X·ª≠ l√Ω qu·∫£n l√Ω th∆∞ m·ª•c input v√† output
"""

import os
import glob
from .base_action import BaseAction


class FolderManagerAction(BaseAction):
    """X·ª≠ l√Ω qu·∫£n l√Ω th∆∞ m·ª•c input v√† output"""
    
    def __init__(self):
        super().__init__()
        self.input_folder = ""
        self.output_folder = ""
    
    def execute(self):
        """Thi·∫øt l·∫≠p th∆∞ m·ª•c input v√† output"""
        print("\nüîß THI·∫æT L·∫¨P TH·ª¶ M·ª§C")
        print("-" * 30)
        
        # Thi·∫øt l·∫≠p th∆∞ m·ª•c input
        self._set_input_folder()
        
        # Thi·∫øt l·∫≠p th∆∞ m·ª•c output
        self._set_output_folder()
        
        print("\n‚úÖ ƒê√£ thi·∫øt l·∫≠p xong th∆∞ m·ª•c!")
        input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
    
    def get_folders(self):
        """L·∫•y th√¥ng tin th∆∞ m·ª•c hi·ªán t·∫°i"""
        return {
            'input': self.input_folder,
            'output': self.output_folder
        }
    
    def _set_input_folder(self):
        """Thi·∫øt l·∫≠p th∆∞ m·ª•c input"""
        while True:
            print(f"\nüì• Th∆∞ m·ª•c Input hi·ªán t·∫°i: {self.input_folder or 'Ch∆∞a ch·ªçn'}")
            input_path = input("üì• Nh·∫≠p ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c ch·ª©a video: ").strip().strip('"')
            
            if not input_path:
                print("‚ùå Vui l√≤ng nh·∫≠p ƒë∆∞·ªùng d·∫´n!")
                continue
            
            if not os.path.exists(input_path):
                print("‚ùå Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i!")
                retry = input("B·∫°n c√≥ mu·ªën th·ª≠ l·∫°i kh√¥ng? (y/n): ").lower()
                if retry != 'y':
                    break
                continue
            
            # Ki·ªÉm tra v√† hi·ªÉn th·ªã video files
            video_files = self.get_video_files(input_path)
            if not video_files:
                print("‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y file video n√†o trong th∆∞ m·ª•c!")
                print("C√°c ƒë·ªãnh d·∫°ng ƒë∆∞·ª£c h·ªó tr·ª£: MP4, AVI, MOV, WMV, FLV, MKV, WEBM")
                choice = input("B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c kh√¥ng? (y/n): ").lower()
                if choice != 'y':
                    continue
            else:
                print(f"‚úÖ T√¨m th·∫•y {len(video_files)} file video:")
                
                # Hi·ªÉn th·ªã t·ªëi ƒëa 10 file ƒë·∫ßu ti√™n
                display_count = min(len(video_files), 10)
                for i, video_file in enumerate(video_files[:display_count], 1):
                    filename = os.path.basename(video_file)
                    file_size = os.path.getsize(video_file) / (1024 * 1024)  # MB
                    print(f"   {i}. {filename} ({file_size:.2f} MB)")
                
                if len(video_files) > 10:
                    print(f"   ... v√† {len(video_files) - 10} file kh√°c")
            
            self.input_folder = input_path
            print(f"‚úÖ ƒê√£ thi·∫øt l·∫≠p th∆∞ m·ª•c input: {input_path}")
            break
    
    def _set_output_folder(self):
        """Thi·∫øt l·∫≠p th∆∞ m·ª•c output"""
        while True:
            print(f"\nüì§ Th∆∞ m·ª•c Output hi·ªán t·∫°i: {self.output_folder or 'Ch∆∞a ch·ªçn'}")
            output_path = input("üì§ Nh·∫≠p ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c xu·∫•t video: ").strip().strip('"')
            
            if not output_path:
                print("‚ùå Vui l√≤ng nh·∫≠p ƒë∆∞·ªùng d·∫´n!")
                continue
            
            # T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a t·ªìn t·∫°i
            try:
                os.makedirs(output_path, exist_ok=True)
                
                # Ki·ªÉm tra quy·ªÅn ghi
                test_file = os.path.join(output_path, ".test_write")
                try:
                    with open(test_file, 'w') as f:
                        f.write("test")
                    os.remove(test_file)
                    
                    self.output_folder = output_path
                    print(f"‚úÖ ƒê√£ thi·∫øt l·∫≠p th∆∞ m·ª•c output: {output_path}")
                    
                    # Hi·ªÉn th·ªã th√¥ng tin th∆∞ m·ª•c
                    self._show_output_folder_info(output_path)
                    break
                    
                except PermissionError:
                    print("‚ùå Kh√¥ng c√≥ quy·ªÅn ghi v√†o th∆∞ m·ª•c n√†y!")
                    continue
                    
            except Exception as e:
                print(f"‚ùå Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c: {e}")
                retry = input("B·∫°n c√≥ mu·ªën th·ª≠ l·∫°i kh√¥ng? (y/n): ").lower()
                if retry != 'y':
                    break
                continue
    
    def _show_output_folder_info(self, output_path):
        """Hi·ªÉn th·ªã th√¥ng tin v·ªÅ th∆∞ m·ª•c output"""
        try:
            # Ki·ªÉm tra kh√¥ng gian tr·ªëng
            if hasattr(os, 'statvfs'):  # Unix/Linux
                statvfs = os.statvfs(output_path)
                free_space = statvfs.f_frsize * statvfs.f_bavail / (1024**3)  # GB
            else:  # Windows
                import shutil
                total, used, free = shutil.disk_usage(output_path)
                free_space = free / (1024**3)  # GB
            
            print(f"üíæ Kh√¥ng gian tr·ªëng: {free_space:.2f} GB")
            
            # Ki·ªÉm tra file existing
            existing_files = []
            for ext in ['*.mp4', '*.avi', '*.mov', '*.wmv', '*.flv', '*.mkv', '*.webm']:
                existing_files.extend(glob.glob(os.path.join(output_path, ext)))
                existing_files.extend(glob.glob(os.path.join(output_path, ext.upper())))
            
            if existing_files:
                print(f"üìÅ Th∆∞ m·ª•c ƒë√£ c√≥ {len(existing_files)} file video")
                choice = input("‚ö†Ô∏è  File c≈© c√≥ th·ªÉ b·ªã ghi ƒë√®. Ti·∫øp t·ª•c? (y/n): ").lower()
                if choice != 'y':
                    print("‚ùå ƒê√£ h·ªßy thi·∫øt l·∫≠p th∆∞ m·ª•c output")
                    self.output_folder = ""
                    return False
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Kh√¥ng th·ªÉ ki·ªÉm tra th√¥ng tin th∆∞ m·ª•c: {e}")
        
        return True
    
    def validate_setup(self):
        """Ki·ªÉm tra xem th∆∞ m·ª•c ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p ch∆∞a"""
        if not self.input_folder or not self.output_folder:
            print("‚ùå Vui l√≤ng thi·∫øt l·∫≠p th∆∞ m·ª•c input v√† output tr∆∞·ªõc!")
            return False
        
        if not os.path.exists(self.input_folder):
            print("‚ùå Th∆∞ m·ª•c input kh√¥ng t·ªìn t·∫°i!")
            return False
        
        if not os.path.exists(self.output_folder):
            print("‚ùå Th∆∞ m·ª•c output kh√¥ng t·ªìn t·∫°i!")
            return False
        
        return True
    
    def get_input_videos(self):
        """L·∫•y danh s√°ch video trong th∆∞ m·ª•c input"""
        if not self.input_folder:
            return []
        return self.get_video_files(self.input_folder)
    
    def get_stats(self):
        """L·∫•y th·ªëng k√™ v·ªÅ th∆∞ m·ª•c"""
        stats = {
            'input_folder': self.input_folder,
            'output_folder': self.output_folder,
            'input_videos': 0,
            'input_size_mb': 0,
            'output_videos': 0,
            'output_size_mb': 0
        }
        
        try:
            # Th·ªëng k√™ input
            if self.input_folder and os.path.exists(self.input_folder):
                input_videos = self.get_video_files(self.input_folder)
                stats['input_videos'] = len(input_videos)
                
                total_size = 0
                for video in input_videos:
                    if os.path.exists(video):
                        total_size += os.path.getsize(video)
                stats['input_size_mb'] = total_size / (1024 * 1024)
            
            # Th·ªëng k√™ output
            if self.output_folder and os.path.exists(self.output_folder):
                output_videos = self.get_video_files(self.output_folder)
                stats['output_videos'] = len(output_videos)
                
                total_size = 0
                for video in output_videos:
                    if os.path.exists(video):
                        total_size += os.path.getsize(video)
                stats['output_size_mb'] = total_size / (1024 * 1024)
                
        except Exception as e:
            print(f"‚ö†Ô∏è  L·ªói khi t√≠nh th·ªëng k√™: {e}")
        
        return stats
