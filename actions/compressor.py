#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Video Compressor Action
X·ª≠ l√Ω n√©n video v·ªõi c√°c m·ª©c ch·∫•t l∆∞·ª£ng kh√°c nhau
"""

import os
from .base_action import BaseAction


class VideoCompressor(BaseAction):
    """X·ª≠ l√Ω n√©n video"""
    
    QUALITY_LEVELS = {
        1: ("ultra", "Ch·∫•t l∆∞·ª£ng cao nh·∫•t"),
        2: ("high", "Ch·∫•t l∆∞·ª£ng cao"),
        3: ("medium", "Ch·∫•t l∆∞·ª£ng trung b√¨nh"),
        4: ("low", "Ch·∫•t l∆∞·ª£ng th·∫•p, file nh·ªè")
    }
    
    def execute(self, input_folder, output_folder):
        """Th·ª±c hi·ªán n√©n video"""
        # Ki·ªÉm tra th∆∞ m·ª•c
        if not self.validate_folders(input_folder, output_folder):
            return
        
        # L·∫•y danh s√°ch video
        video_files = self.get_video_files(input_folder)
        if not video_files:
            print("‚ùå Kh√¥ng t√¨m th·∫•y file video n√†o!")
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
            return
        
        print(f"\nüóúÔ∏è N√âN VIDEO")
        print(f"T√¨m th·∫•y {len(video_files)} file video")
        
        # Ch·ªçn m·ª©c n√©n
        quality = self._select_quality_level()
        if not quality:
            return
        
        # Th·ª±c hi·ªán n√©n
        self._compress_videos(video_files, output_folder, quality)
        
        input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
    
    def _select_quality_level(self):
        """Cho ph√©p user ch·ªçn m·ª©c ch·∫•t l∆∞·ª£ng"""
        print("\nCh·ªçn m·ª©c n√©n:")
        for key, (_, desc) in self.QUALITY_LEVELS.items():
            print(f"{key}. {desc}")
        
        try:
            choice = int(input("Nh·∫≠p s·ªë: "))
            
            if choice in self.QUALITY_LEVELS:
                quality, desc = self.QUALITY_LEVELS[choice]
                return quality
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
                input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                return None
                
        except ValueError:
            print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
            return None
    
    def _compress_videos(self, video_files, output_folder, quality):
        """N√©n c√°c video v·ªõi ch·∫•t l∆∞·ª£ng ƒë√£ ch·ªçn"""
        print(f"\nüîÑ ƒêang n√©n video v·ªõi ch·∫•t l∆∞·ª£ng {quality.upper()}...")
        print(f"S·ªë file c·∫ßn x·ª≠ l√Ω: {len(video_files)}")
        print("-" * 50)
        
        success_count = 0
        error_count = 0
        total_saved = 0  # T·ªïng dung l∆∞·ª£ng ƒë√£ ti·∫øt ki·ªám
        
        for i, video_file in enumerate(video_files, 1):
            filename = os.path.basename(video_file)
            name, ext = os.path.splitext(filename)
            output_file = os.path.join(output_folder, f"{name}_compressed{ext}")
            
            print(f"\n[{i}/{len(video_files)}] üìÅ X·ª≠ l√Ω: {filename}")
            
            try:
                # K√≠ch th∆∞·ªõc file g·ªëc
                original_size = os.path.getsize(video_file) / (1024 * 1024)  # MB
                print(f"  üìÄ K√≠ch th∆∞·ªõc g·ªëc: {original_size:.2f} MB")
                
                # Ch·∫°y l·ªánh n√©n
                self.run_videoforge_command([
                    "process",
                    "-i", video_file,
                    "-o", output_file,
                    "--quality", quality
                ])
                
                # Ki·ªÉm tra k·∫øt qu·∫£
                if os.path.exists(output_file):
                    compressed_size = os.path.getsize(output_file) / (1024 * 1024)
                    saved = original_size - compressed_size
                    saved_percent = (saved / original_size) * 100
                    
                    print(f"  ‚úÖ Th√†nh c√¥ng!")
                    print(f"  üìâ K√≠ch th∆∞·ªõc sau n√©n: {compressed_size:.2f} MB")
                    print(f"  üíæ ƒê√£ ti·∫øt ki·ªám: {saved:.2f} MB ({saved_percent:.1f}%)")
                    
                    success_count += 1
                    total_saved += saved
                else:
                    print(f"  ‚ùå L·ªói: File output kh√¥ng ƒë∆∞·ª£c t·∫°o!")
                    error_count += 1
                    
            except Exception as e:
                print(f"  ‚ùå L·ªói: {e}")
                error_count += 1
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£ t·ªïng h·ª£p
        print("\n" + "=" * 50)
        print(f"üèÅ K·∫øt qu·∫£ n√©n video:")
        print(f"  ‚úÖ Th√†nh c√¥ng: {success_count}/{len(video_files)}")
        print(f"  ‚ùå L·ªói: {error_count}/{len(video_files)}")
        print(f"  üíæ T·ªïng dung l∆∞·ª£ng ti·∫øt ki·ªám: {total_saved:.2f} MB")
        print(f"  üóúÔ∏è Ch·∫•t l∆∞·ª£ng √°p d·ª•ng: {quality.upper()}")
        print("=" * 50)
