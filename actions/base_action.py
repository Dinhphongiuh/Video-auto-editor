#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Base Action Class
L·ªõp c∆° s·ªü cho t·∫•t c·∫£ c√°c action
"""

import os
import glob
import subprocess


class BaseAction:
    """L·ªõp c∆° s·ªü cho t·∫•t c·∫£ c√°c action"""
    
    def __init__(self):
        self.video_extensions = ['*.mp4', '*.avi', '*.mov', '*.wmv', '*.flv', '*.mkv', '*.webm']
    
    def validate_folders(self, input_folder, output_folder):
        """Ki·ªÉm tra th∆∞ m·ª•c input v√† output"""
        if not input_folder or not output_folder:
            print("‚ùå Vui l√≤ng thi·∫øt l·∫≠p th∆∞ m·ª•c input v√† output tr∆∞·ªõc!")
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
            return False
        return True
    
    def get_video_files(self, folder_path):
        """L·∫•y danh s√°ch file video trong th∆∞ m·ª•c"""
        if not folder_path or not os.path.exists(folder_path):
            return []
        
        video_files = []
        
        for ext in self.video_extensions:
            video_files.extend(glob.glob(os.path.join(folder_path, ext)))
            video_files.extend(glob.glob(os.path.join(folder_path, ext.upper())))
        
        # Lo·∫°i b·ªè duplicate (do Windows kh√¥ng ph√¢n bi·ªát ch·ªØ hoa/th∆∞·ªùng)
        video_files = list(set(video_files))
        video_files.sort()  # S·∫Øp x·∫øp theo th·ª© t·ª± abc
        
        return video_files
    
    def run_videoforge_command(self, command_parts):
        """Ch·∫°y l·ªánh videoforge"""
        try:
            # Log chi ti·∫øt c√°c tham s·ªë
            print("\nüîç DEBUG: Tham s·ªë l·ªánh:")
            for i, part in enumerate(command_parts):
                print(f"  [{i}]: {part}")
            
            # K√≠ch ho·∫°t virtual environment v√† ch·∫°y l·ªánh
            venv_python = os.path.join("D:", "VideoForge", "videoforge-core", "venv", "Scripts", "python.exe")
            
            if os.path.exists(venv_python):
                cmd = [venv_python, "-m", "videoforge"] + command_parts
            else:
                cmd = ["videoforge"] + command_parts
            
            print(f"\nüöÄ ƒêang ch·∫°y: {' '.join(cmd)}")
            print(f"üìù Chi ti·∫øt l·ªánh: {cmd}")
            print("-" * 50)
            
            result = subprocess.run(cmd, capture_output=True, text=True, encoding='utf-8')
            
            print(f"\nüìä M√£ tr·∫£ v·ªÅ: {result.returncode}")
            
            if result.returncode == 0:
                print("‚úÖ Th√†nh c√¥ng!")
                if result.stdout:
                    print("üì§ K·∫øt qu·∫£:")
                    print(result.stdout)
            else:
                print("‚ùå L·ªói!")
                print(f"üèÅ Return code: {result.returncode}")
                
                # Hi·ªÉn th·ªã t·∫•t c·∫£ output ƒë·ªÉ debug
                if result.stderr:
                    print("\nüî• L·ªói chi ti·∫øt (stderr):")
                    print(result.stderr)
                    
                if result.stdout:
                    print("\nüì§ Output (stdout):")
                    print(result.stdout)
                    
        except Exception as e:
            print(f"‚ùå L·ªói khi ch·∫°y l·ªánh: {e}")
            import traceback
            print(f"üîç Chi ti·∫øt l·ªói: {traceback.format_exc()}")
    
    def execute(self, input_folder, output_folder):
        """Ph∆∞∆°ng th·ª©c abstract - c√°c subclass ph·∫£i implement"""
        raise NotImplementedError("Subclass must implement execute method")
