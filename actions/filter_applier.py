#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Video Filter Applier Action
X·ª≠ l√Ω √°p d·ª•ng b·ªô l·ªçc video
"""

import os
import json
from .base_action import BaseAction


class VideoFilterApplier(BaseAction):
    """X·ª≠ l√Ω √°p d·ª•ng b·ªô l·ªçc video"""
    
    def __init__(self):
        super().__init__()
        self.filters_file = "video_filters.json"
        self.filters = self._load_filters()
    
    def _load_filters(self):
        """T·∫£i b·ªô l·ªçc t·ª´ file JSON"""
        try:
            if os.path.exists(self.filters_file):
                with open(self.filters_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return self._get_default_filters()
        except Exception as e:
            print(f"‚ùå L·ªói khi t·∫£i filters: {e}")
            return self._get_default_filters()
    
    def _get_default_filters(self):
        """Tr·∫£ v·ªÅ b·ªô l·ªçc m·∫∑c ƒë·ªãnh"""
        return {
            "presets": {
                "vintage": {
                    "name": "Vintage",
                    "description": "Hi·ªáu ·ª©ng c·ªï ƒëi·ªÉn",
                    "brightness": -10,
                    "contrast": 15,
                    "saturation": -20,
                    "sepia": True
                },
                "cinematic": {
                    "name": "Cinematic",
                    "description": "Hi·ªáu ·ª©ng ƒëi·ªán ·∫£nh",
                    "brightness": 5,
                    "contrast": 25,
                    "saturation": 10,
                    "vignette": True
                },
                "vibrant": {
                    "name": "Vibrant",
                    "description": "M√†u s·∫Øc s·ªëng ƒë·ªông",
                    "brightness": 10,
                    "contrast": 20,
                    "saturation": 30,
                    "sharpness": 15
                },
                "black_white": {
                    "name": "Black & White",
                    "description": "ƒêen tr·∫Øng",
                    "brightness": 0,
                    "contrast": 20,
                    "saturation": -100,
                    "sharpness": 10
                },
                "warm": {
                    "name": "Warm",
                    "description": "T√¥ng m√†u ·∫•m",
                    "brightness": 5,
                    "contrast": 10,
                    "saturation": 15,
                    "temperature": 200
                },
                "cool": {
                    "name": "Cool",
                    "description": "T√¥ng m√†u l·∫°nh",
                    "brightness": 0,
                    "contrast": 15,
                    "saturation": 10,
                    "temperature": -200
                }
            }
        }
    
    def execute(self, input_folder, output_folder):
        """Th·ª±c hi·ªán √°p d·ª•ng b·ªô l·ªçc video"""
        # Ki·ªÉm tra th∆∞ m·ª•c
        if not self.validate_folders(input_folder, output_folder):
            return
        
        # L·∫•y danh s√°ch video
        video_files = self.get_video_files(input_folder)
        if not video_files:
            print("‚ùå Kh√¥ng t√¨m th·∫•y file video n√†o!")
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
            return
        
        print(f"\nüé® √ÅP D·ª§NG B·ªò L·ªåC VIDEO")
        print(f"T√¨m th·∫•y {len(video_files)} file video")
        
        # Ch·ªçn b·ªô l·ªçc
        filter_config = self._select_filter()
        if not filter_config:
            return
        
        # Th·ª±c hi·ªán √°p d·ª•ng b·ªô l·ªçc
        filter_name = filter_config.get('name', 'custom')
        print(f"\nüîÑ ƒêang √°p d·ª•ng b·ªô l·ªçc '{filter_name}'...")
        print(f"S·ªë file c·∫ßn x·ª≠ l√Ω: {len(video_files)}")
        print("-" * 50)
        
        success_count = 0
        error_count = 0
        
        for i, video_file in enumerate(video_files, 1):
            filename = os.path.basename(video_file)
            name, ext = os.path.splitext(filename)
            output_file = os.path.join(output_folder, f"{name}_filtered_{filter_name.lower()}{ext}")
            
            print(f"\n[{i}/{len(video_files)}] üìÅ X·ª≠ l√Ω: {filename}")
            print(f"  üìç Input : {video_file}")
            print(f"  üì§ Output: {output_file}")
            
            # Ki·ªÉm tra file input t·ªìn t·∫°i
            if not os.path.exists(video_file):
                print(f"  ‚ùå L·ªói: File input kh√¥ng t·ªìn t·∫°i!")
                error_count += 1
                continue
            
            try:
                # Ki·ªÉm tra tr·∫°ng th√°i tr∆∞·ªõc khi ch·∫°y
                file_size = os.path.getsize(video_file) / (1024 * 1024)  # MB
                print(f"  üìÄ K√≠ch th∆∞·ªõc file: {file_size:.2f} MB")
                print(f"  üé® B·ªô l·ªçc: {filter_name}")
                
                # T·∫°o command v·ªõi filter parameters
                cmd = [
                    "process",
                    "-i", video_file,
                    "-o", output_file
                ]
                
                # Th√™m c√°c tham s·ªë filter
                if 'brightness' in filter_config:
                    cmd.extend(["--brightness", str(filter_config['brightness'])])
                if 'contrast' in filter_config:
                    cmd.extend(["--contrast", str(filter_config['contrast'])])
                if 'saturation' in filter_config:
                    cmd.extend(["--saturation", str(filter_config['saturation'])])
                
                # Ch·∫°y l·ªánh √°p d·ª•ng b·ªô l·ªçc
                self.run_videoforge_command(cmd)
                
                # Ki·ªÉm tra k·∫øt qu·∫£
                if os.path.exists(output_file):
                    output_size = os.path.getsize(output_file) / (1024 * 1024)
                    print(f"  ‚úÖ Th√†nh c√¥ng! K√≠ch th∆∞·ªõc output: {output_size:.2f} MB")
                    success_count += 1
                else:
                    print(f"  ‚ùå L·ªói: File output kh√¥ng ƒë∆∞·ª£c t·∫°o!")
                    error_count += 1
                    
            except Exception as e:
                print(f"  ‚ùå L·ªói: {e}")
                error_count += 1
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        self._show_results(success_count, error_count, len(video_files), filter_name)
        input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
    
    def _select_filter(self):
        """Cho ph√©p user ch·ªçn b·ªô l·ªçc"""
        presets = self.filters.get('presets', {})
        
        print("\nCh·ªçn b·ªô l·ªçc:")
        preset_keys = list(presets.keys())
        
        for i, key in enumerate(preset_keys, 1):
            preset = presets[key]
            print(f"{i}. {preset['name']} - {preset['description']}")
        
        print(f"{len(preset_keys) + 1}. T√πy ch·ªânh")
        
        try:
            choice = int(input("Nh·∫≠p s·ªë: ")) - 1
            
            if 0 <= choice < len(preset_keys):
                selected_key = preset_keys[choice]
                return presets[selected_key]
            elif choice == len(preset_keys):
                return self._create_custom_filter()
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
                return None
                
        except ValueError:
            print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
            return None
    
    def _create_custom_filter(self):
        """T·∫°o b·ªô l·ªçc t√πy ch·ªânh"""
        print("\nüé® T·∫†O B·ªò L·ªåC T√ôY CH·ªàNH")
        print("Nh·∫≠p gi√° tr·ªã cho c√°c tham s·ªë (ƒë·ªÉ tr·ªëng ƒë·ªÉ b·ªè qua):")
        
        filter_config = {"name": "Custom"}
        
        try:
            # Brightness
            brightness = input("ƒê·ªô s√°ng (-100 ƒë·∫øn 100): ").strip()
            if brightness:
                filter_config['brightness'] = int(brightness)
            
            # Contrast
            contrast = input("ƒê·ªô tÎåÄÎπÑ (-100 ƒë·∫øn 100): ").strip()
            if contrast:
                filter_config['contrast'] = int(contrast)
            
            # Saturation
            saturation = input("ƒê·ªô b√£o h√≤a (-100 ƒë·∫øn 100): ").strip()
            if saturation:
                filter_config['saturation'] = int(saturation)
            
            return filter_config
            
        except ValueError:
            print("‚ùå Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá!")
            return None
    
    def _show_results(self, success_count, error_count, total_count, filter_name):
        """Hi·ªÉn th·ªã k·∫øt qu·∫£ x·ª≠ l√Ω"""
        print("\n" + "=" * 50)
        print(f"üèÅ K·∫øt qu·∫£ √°p d·ª•ng b·ªô l·ªçc:")
        print(f"  ‚úÖ Th√†nh c√¥ng: {success_count}/{total_count}")
        print(f"  ‚ùå L·ªói: {error_count}/{total_count}")
        print(f"  üé® B·ªô l·ªçc: {filter_name}")
        print("=" * 50)
