#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Video Filter Applier Action - C·∫£i ti·∫øn v√† t·ªëi ∆∞u h√≥a
X·ª≠ l√Ω √°p d·ª•ng b·ªô l·ªçc video s·ª≠ d·ª•ng FFmpeg tr·ª±c ti·∫øp v·ªõi nhi·ªÅu t√≠nh nƒÉng n√¢ng cao
"""

import os
import json
import subprocess
import time
from pathlib import Path
from .base_action import BaseAction


class VideoFilterApplier(BaseAction):
    """X·ª≠ l√Ω √°p d·ª•ng b·ªô l·ªçc video b·∫±ng FFmpeg tr·ª±c ti·∫øp - Phi√™n b·∫£n c·∫£i ti·∫øn"""
    
    def __init__(self):
        super().__init__()
        self.filters_file = "video_filters.json"
        self.filters = self._load_filters()
        
        # Th√™m c·∫•u h√¨nh n√¢ng cao
        self.ffmpeg_configs = {
            'fast': ['-preset', 'fast', '-threads', '4'],
            'quality': ['-preset', 'medium', '-crf', '18'],
            'balanced': ['-preset', 'medium', '-threads', '4']
        }
        
        # H·ªó tr·ª£ GPU acceleration n·∫øu c√≥
        self.gpu_acceleration = self._check_gpu_support()
    
    def _load_filters(self):
        """T·∫£i b·ªô l·ªçc t·ª´ file JSON v·ªõi error handling t·ªët h∆°n"""
        try:
            if os.path.exists(self.filters_file):
                with open(self.filters_file, 'r', encoding='utf-8') as f:
                    filters_data = json.load(f)
                    print(f"‚úÖ ƒê√£ t·∫£i {len(filters_data.get('presets', {}))} b·ªô l·ªçc t·ª´ {self.filters_file}")
                    return filters_data
            else:
                print(f"‚ö†Ô∏è File {self.filters_file} kh√¥ng t·ªìn t·∫°i, s·ª≠ d·ª•ng b·ªô l·ªçc m·∫∑c ƒë·ªãnh")
                return self._get_default_filters()
        except json.JSONDecodeError as e:
            print(f"‚ùå L·ªói JSON trong {self.filters_file}: {e}")
            return self._get_default_filters()
        except Exception as e:
            print(f"‚ùå L·ªói khi t·∫£i filters: {e}")
            return self._get_default_filters()
    
    def _get_default_filters(self):
        """Tr·∫£ v·ªÅ b·ªô l·ªçc m·∫∑c ƒë·ªãnh v·ªõi nhi·ªÅu options h∆°n"""
        return {
            "presets": {
                "vintage": {
                    "name": "Vintage",
                    "description": "Hi·ªáu ·ª©ng c·ªï ƒëi·ªÉn v·ªõi t√¥ng m√†u ·∫•m",
                    "brightness": -0.1,
                    "contrast": 1.15,
                    "saturation": 0.8,
                    "gamma": 0.9,
                    "sepia": True
                },
                "cinematic": {
                    "name": "Cinematic",
                    "description": "Hi·ªáu ·ª©ng ƒëi·ªán ·∫£nh chuy√™n nghi·ªáp",
                    "brightness": 0.05,
                    "contrast": 1.25,
                    "saturation": 1.1,
                    "gamma": 1.1,
                    "vignette": True
                },
                "vibrant": {
                    "name": "Vibrant",
                    "description": "M√†u s·∫Øc s·ªëng ƒë·ªông v√† n·ªïi b·∫≠t",
                    "brightness": 0.1,
                    "contrast": 1.2,
                    "saturation": 1.3,
                    "gamma": 1.05
                },
                "black_white": {
                    "name": "Black & White",
                    "description": "ƒêen tr·∫Øng c·ªï ƒëi·ªÉn",
                    "brightness": 0.0,
                    "contrast": 1.2,
                    "saturation": 0.0,
                    "gamma": 1.0
                },
                "warm": {
                    "name": "Warm",
                    "description": "T√¥ng m√†u ·∫•m √°p",
                    "brightness": 0.05,
                    "contrast": 1.1,
                    "saturation": 1.15,
                    "temperature": 3200
                },
                "cool": {
                    "name": "Cool",
                    "description": "T√¥ng m√†u l·∫°nh m√°t",
                    "brightness": 0.0,
                    "contrast": 1.15,
                    "saturation": 1.1,
                    "temperature": 6500
                },
                "dramatic": {
                    "name": "Dramatic",
                    "description": "Hi·ªáu ·ª©ng k·ªãch t√≠nh cao",
                    "brightness": -0.05,
                    "contrast": 1.4,
                    "saturation": 1.2,
                    "gamma": 0.85,
                    "sharpen": True
                },
                "soft": {
                    "name": "Soft",
                    "description": "Hi·ªáu ·ª©ng m·ªÅm m·∫°i",
                    "brightness": 0.1,
                    "contrast": 0.9,
                    "saturation": 1.05,
                    "blur": 0.5
                }
            }
        }
    
    def _check_gpu_support(self):
        """Ki·ªÉm tra h·ªó tr·ª£ GPU acceleration"""
        try:
            result = subprocess.run(['ffmpeg', '-hwaccels'], 
                                  capture_output=True, text=True)
            if result.returncode == 0 and 'cuda' in result.stdout:
                print("üöÄ Ph√°t hi·ªán h·ªó tr·ª£ GPU acceleration (CUDA)")
                return True
        except:
            pass
        return False
    
    def execute(self, input_folder, output_folder):
        """Th·ª±c hi·ªán √°p d·ª•ng b·ªô l·ªçc video v·ªõi giao di·ªán c·∫£i ti·∫øn"""
        # Ki·ªÉm tra th∆∞ m·ª•c
        if not self.validate_folders(input_folder, output_folder):
            return
        
        # L·∫•y danh s√°ch video
        video_files = self.get_video_files(input_folder)
        if not video_files:
            print("‚ùå Kh√¥ng t√¨m th·∫•y file video n√†o!")
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
            return
        
        print(f"\nüé® √ÅP D·ª§NG B·ªò L·ªåC VIDEO - VideoForge Filter Engine")
        print(f"üìÇ Th∆∞ m·ª•c input: {input_folder}")
        print(f"üì§ Th∆∞ m·ª•c output: {output_folder}")
        print(f"üé¨ T√¨m th·∫•y {len(video_files)} file video")
        
        # Ki·ªÉm tra FFmpeg
        if not self._check_ffmpeg():
            print("‚ùå FFmpeg kh√¥ng kh·∫£ d·ª•ng! Vui l√≤ng c√†i ƒë·∫∑t FFmpeg.")
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
            return
        
        # Hi·ªÉn th·ªã th√¥ng tin h·ªá th·ªëng
        if self.gpu_acceleration:
            print("üöÄ GPU acceleration c√≥ s·∫µn")
        
        # Ch·ªçn b·ªô l·ªçc
        filter_config = self._select_filter()
        if not filter_config:
            return
        
        # Ch·ªçn ch·∫ø ƒë·ªô x·ª≠ l√Ω
        processing_mode = self._select_processing_mode()
        
        # Th·ª±c hi·ªán √°p d·ª•ng b·ªô l·ªçc
        self._process_videos(video_files, output_folder, filter_config, processing_mode)
    
    def _check_ffmpeg(self):
        """Ki·ªÉm tra FFmpeg c√≥ kh·∫£ d·ª•ng kh√¥ng v·ªõi th√¥ng tin chi ti·∫øt"""
        try:
            result = subprocess.run(['ffmpeg', '-version'], 
                                  capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                # L·∫•y th√¥ng tin version
                version_info = result.stdout.split('\n')[0]
                print(f"‚úÖ FFmpeg detected: {version_info}")
                return True
            return False
        except subprocess.TimeoutExpired:
            print("‚ùå FFmpeg timeout - c√≥ th·ªÉ ƒëang b·∫≠n")
            return False
        except FileNotFoundError:
            print("‚ùå FFmpeg ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ho·∫∑c kh√¥ng c√≥ trong PATH")
            return False
        except Exception as e:
            print(f"‚ùå L·ªói ki·ªÉm tra FFmpeg: {e}")
            return False
    
    def _select_processing_mode(self):
        """Ch·ªçn ch·∫ø ƒë·ªô x·ª≠ l√Ω"""
        print("\n‚öôÔ∏è CH·ªåN CH·ªÇ ƒê·ªò X·ª¨ L√ù:")
        print("1. üèÉ Fast - X·ª≠ l√Ω nhanh (ch·∫•t l∆∞·ª£ng trung b√¨nh)")
        print("2. ‚öñÔ∏è  Balanced - C√¢n b·∫±ng t·ªëc ƒë·ªô v√† ch·∫•t l∆∞·ª£ng")
        print("3. üéØ Quality - Ch·∫•t l∆∞·ª£ng cao (x·ª≠ l√Ω ch·∫≠m h∆°n)")
        
        if self.gpu_acceleration:
            print("4. üöÄ GPU Accelerated - S·ª≠ d·ª•ng GPU (nhanh nh·∫•t)")
        
        try:
            choice = int(input("Nh·∫≠p l·ª±a ch·ªçn (1-4): "))
            mode_map = {
                1: 'fast',
                2: 'balanced', 
                3: 'quality',
                4: 'gpu' if self.gpu_acceleration else 'balanced'
            }
            return mode_map.get(choice, 'balanced')
        except ValueError:
            print("‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá, s·ª≠ d·ª•ng ch·∫ø ƒë·ªô balanced")
            return 'balanced'
    
    def _process_videos(self, video_files, output_folder, filter_config, processing_mode):
        """X·ª≠ l√Ω danh s√°ch video v·ªõi progress tracking"""
        filter_name = filter_config.get('name', 'custom')
        print(f"\nüîÑ ƒêang √°p d·ª•ng b·ªô l·ªçc '{filter_name}' - Ch·∫ø ƒë·ªô: {processing_mode}")
        print(f"üìä Ti·∫øn ƒë·ªô x·ª≠ l√Ω:")
        print("-" * 70)
        
        start_time = time.time()
        success_count = 0
        error_count = 0
        total_size_before = 0
        total_size_after = 0
        
        for i, video_file in enumerate(video_files, 1):
            filename = os.path.basename(video_file)
            name, ext = os.path.splitext(filename)
            
            # T·∫°o t√™n file output v·ªõi timestamp ƒë·ªÉ tr√°nh tr√πng
            timestamp = int(time.time()) % 10000
            output_file = os.path.join(output_folder, 
                                     f"{name}_filtered_{filter_name.lower()}_{timestamp}{ext}")
            
            print(f"\n[{i}/{len(video_files)}] üé¨ X·ª≠ l√Ω: {filename}")
            
            # Ki·ªÉm tra file input
            if not os.path.exists(video_file):
                print(f"  ‚ùå L·ªói: File input kh√¥ng t·ªìn t·∫°i!")
                error_count += 1
                continue
            
            try:
                # Th√¥ng tin file
                file_size = os.path.getsize(video_file)
                total_size_before += file_size
                print(f"  üìÄ K√≠ch th∆∞·ªõc: {file_size / (1024*1024):.2f} MB")
                print(f"  üé® B·ªô l·ªçc: {filter_name}")
                print(f"  ‚öôÔ∏è Ch·∫ø ƒë·ªô: {processing_mode}")
                
                # √Åp d·ª•ng filter
                process_start = time.time()
                if self._apply_ffmpeg_filter_advanced(video_file, output_file, 
                                                    filter_config, processing_mode):
                    process_time = time.time() - process_start
                    
                    if os.path.exists(output_file):
                        output_size = os.path.getsize(output_file)
                        total_size_after += output_size
                        print(f"  ‚úÖ Th√†nh c√¥ng! ({process_time:.1f}s)")
                        print(f"  üì§ Output: {output_size / (1024*1024):.2f} MB")
                        success_count += 1
                    else:
                        print(f"  ‚ùå L·ªói: File output kh√¥ng ƒë∆∞·ª£c t·∫°o")
                        error_count += 1
                else:
                    print(f"  ‚ùå L·ªói: Kh√¥ng th·ªÉ √°p d·ª•ng filter")
                    error_count += 1
                    
            except Exception as e:
                print(f"  ‚ùå L·ªói exception: {e}")
                error_count += 1
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£ t·ªïng h·ª£p
        total_time = time.time() - start_time
        self._show_advanced_results(success_count, error_count, len(video_files), 
                                  filter_name, total_time, total_size_before, 
                                  total_size_after, processing_mode)
        input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
    
    def _apply_ffmpeg_filter_advanced(self, input_file, output_file, filter_config, mode):
        """√Åp d·ª•ng filter v·ªõi nhi·ªÅu t√πy ch·ªçn n√¢ng cao"""
        try:
            # T·∫°o filter string ph·ª©c t·∫°p
            video_filters = []
            audio_filters = []
            
            # X√¢y d·ª±ng eq filter cho color correction
            eq_params = []
            if 'brightness' in filter_config:
                eq_params.append(f"brightness={filter_config['brightness']}")
            if 'contrast' in filter_config:
                eq_params.append(f"contrast={filter_config['contrast']}")
            if 'saturation' in filter_config:
                eq_params.append(f"saturation={filter_config['saturation']}")
            if 'gamma' in filter_config:
                eq_params.append(f"gamma={filter_config['gamma']}")
            
            if eq_params:
                video_filters.append(f"eq={':'.join(eq_params)}")
            
            # C√°c effect ƒë·∫∑c bi·ªát
            if filter_config.get('sepia'):
                video_filters.append("colorchannelmixer=.393:.769:.189:0:.349:.686:.168:0:.272:.534:.131")
            
            if filter_config.get('vignette'):
                video_filters.append("vignette")
            
            if filter_config.get('sharpen'):
                video_filters.append("unsharp=5:5:1.0:5:5:0.0")
            
            if filter_config.get('blur'):
                blur_val = filter_config['blur']
                video_filters.append(f"boxblur={blur_val}:{blur_val}")
            
            # Temperature adjustment (simplified)
            if 'temperature' in filter_config:
                temp = filter_config['temperature']
                if temp < 5000:  # Warm
                    video_filters.append("colorbalance=rs=0.1:gs=0.0:bs=-0.1")
                elif temp > 6000:  # Cool
                    video_filters.append("colorbalance=rs=-0.1:gs=0.0:bs=0.1")
            
            # X√¢y d·ª±ng FFmpeg command
            cmd = ['ffmpeg', '-i', input_file]
            
            # GPU acceleration
            if mode == 'gpu' and self.gpu_acceleration:
                cmd.extend(['-hwaccel', 'cuda', '-c:v', 'h264_nvenc'])
            
            # Video filters
            if video_filters:
                cmd.extend(['-vf', ','.join(video_filters)])
            
            # Audio copy (no processing)
            cmd.extend(['-c:a', 'copy'])
            
            # Processing mode settings
            if mode in self.ffmpeg_configs:
                cmd.extend(self.ffmpeg_configs[mode])
            
            # Output settings
            cmd.extend(['-y', output_file])
            
            # Debug: in command (c√≥ th·ªÉ comment out)
            # print(f"  üîß Command: {' '.join(cmd)}")
            
            # Ch·∫°y FFmpeg v·ªõi progress tracking
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                return True
            else:
                print(f"  ‚ùå FFmpeg stderr: {result.stderr[:200]}...")
                return False
                
        except Exception as e:
            print(f"  ‚ùå Exception trong FFmpeg: {e}")
            return False
    
    def _select_filter(self):
        """Giao di·ªán ch·ªçn b·ªô l·ªçc c·∫£i ti·∫øn"""
        presets = self.filters.get('presets', {})
        
        print("\nüé® CH·ªåN B·ªò L·ªåC VIDEO:")
        print("=" * 50)
        
        preset_keys = list(presets.keys())
        
        for i, key in enumerate(preset_keys, 1):
            preset = presets[key]
            print(f"{i:2d}. {preset['name']:15} - {preset['description']}")
            
            # Hi·ªÉn th·ªã parameters
            params = []
            if 'brightness' in preset and preset['brightness'] != 0:
                params.append(f"Brightness: {preset['brightness']:+.1f}")
            if 'contrast' in preset and preset['contrast'] != 1:
                params.append(f"Contrast: {preset['contrast']:.1f}x")
            if 'saturation' in preset and preset['saturation'] != 1:
                params.append(f"Saturation: {preset['saturation']:.1f}x")
            
            if params:
                print(f"     ‚îî‚îÄ {', '.join(params)}")
        
        print(f"{len(preset_keys) + 1:2d}. Custom Filter      - T·∫°o b·ªô l·ªçc t√πy ch·ªânh")
        print(f" 0. Quay l·∫°i")
        print("=" * 50)
        
        try:
            choice = int(input("üëâ Nh·∫≠p s·ªë ƒë·ªÉ ch·ªçn b·ªô l·ªçc: "))
            
            if choice == 0:
                return None
            elif 1 <= choice <= len(preset_keys):
                selected_key = preset_keys[choice - 1]
                selected_filter = presets[selected_key]
                print(f"\n‚úÖ ƒê√£ ch·ªçn b·ªô l·ªçc: {selected_filter['name']}")
                return selected_filter
            elif choice == len(preset_keys) + 1:
                return self._create_custom_filter()
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
                return None
                
        except ValueError:
            print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
            return None
    
    def _create_custom_filter(self):
        """T·∫°o b·ªô l·ªçc t√πy ch·ªânh v·ªõi giao di·ªán wizard"""
        print("\nüé® T·∫†O B·ªò L·ªåC T√ôY CH·ªàNH")
        print("=" * 40)
        print("Nh·∫≠p gi√° tr·ªã cho c√°c tham s·ªë (Enter ƒë·ªÉ b·ªè qua):")
        print()
        
        filter_config = {"name": "Custom"}
        
        try:
            # Basic adjustments
            print("üìù C√ÅC ƒêI·ªÄU CH·ªàNH C∆† B·∫¢N:")
            
            brightness = input("üîÜ ƒê·ªô s√°ng (-1.0 ƒë·∫øn 1.0, 0=kh√¥ng ƒë·ªïi): ").strip()
            if brightness:
                val = float(brightness)
                if -1.0 <= val <= 1.0:
                    filter_config['brightness'] = val
                    print(f"   ‚úì Brightness: {val:+.2f}")
                else:
                    print("   ‚ö†Ô∏è Gi√° tr·ªã ngo√†i ph·∫°m vi, b·ªè qua")
            
            contrast = input("üî≥ ƒê·ªô t∆∞∆°ng ph·∫£n (0.0 ƒë·∫øn 3.0, 1.0=kh√¥ng ƒë·ªïi): ").strip()
            if contrast:
                val = float(contrast)
                if 0.0 <= val <= 3.0:
                    filter_config['contrast'] = val
                    print(f"   ‚úì Contrast: {val:.2f}x")
                else:
                    print("   ‚ö†Ô∏è Gi√° tr·ªã ngo√†i ph·∫°m vi, b·ªè qua")
            
            saturation = input("üåà ƒê·ªô b√£o h√≤a (0.0 ƒë·∫øn 3.0, 1.0=kh√¥ng ƒë·ªïi): ").strip()
            if saturation:
                val = float(saturation)
                if 0.0 <= val <= 3.0:
                    filter_config['saturation'] = val
                    print(f"   ‚úì Saturation: {val:.2f}x")
                else:
                    print("   ‚ö†Ô∏è Gi√° tr·ªã ngo√†i ph·∫°m vi, b·ªè qua")
            
            print("\nüé≠ C√ÅC HI·ªÜU ·ª®NG ƒê·ªòC BI·ªÜT:")
            
            sepia = input("üì∏ Hi·ªáu ·ª©ng Sepia (y/n): ").strip().lower()
            if sepia in ['y', 'yes', '1']:
                filter_config['sepia'] = True
                print("   ‚úì Sepia effect enabled")
            
            vignette = input("üï≥Ô∏è Hi·ªáu ·ª©ng Vignette (y/n): ").strip().lower()
            if vignette in ['y', 'yes', '1']:
                filter_config['vignette'] = True
                print("   ‚úì Vignette effect enabled")
            
            # T√≥m t·∫Øt custom filter
            print(f"\nüìã T√ìM T·∫ÆT B·ªò L·ªåC T√ôY CH·ªàNH:")
            for key, value in filter_config.items():
                if key != 'name':
                    print(f"   ‚Ä¢ {key}: {value}")
            
            confirm = input("\n‚úÖ X√°c nh·∫≠n t·∫°o b·ªô l·ªçc n√†y (y/n): ").strip().lower()
            if confirm in ['y', 'yes', '1']:
                return filter_config
            else:
                print("‚ùå H·ªßy t·∫°o b·ªô l·ªçc")
                return None
            
        except ValueError:
            print("‚ùå Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá!")
            return None
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return None
    
    def _show_advanced_results(self, success_count, error_count, total_count, 
                             filter_name, total_time, size_before, size_after, mode):
        """Hi·ªÉn th·ªã k·∫øt qu·∫£ chi ti·∫øt v·ªõi th·ªëng k√™"""
        print("\n" + "=" * 70)
        print(f"üèÅ K·∫æT QU·∫¢ X·ª¨ L√ù B·ªò L·ªåC VIDEO")
        print("=" * 70)
        
        # Th·ªëng k√™ c∆° b·∫£n
        print(f"üìä TH·ªêNG K√ä T·ªîNG QUAN:")
        print(f"   ‚úÖ Th√†nh c√¥ng: {success_count}/{total_count} file")
        print(f"   ‚ùå L·ªói: {error_count}/{total_count} file")
        print(f"   üé® B·ªô l·ªçc: {filter_name}")
        print(f"   ‚öôÔ∏è Ch·∫ø ƒë·ªô: {mode}")
        
        # Th·ªëng k√™ th·ªùi gian
        print(f"\n‚è±Ô∏è TH·ªêNG K√ä TH·ªúI GIAN:")
        print(f"   ‚è∞ T·ªïng th·ªùi gian: {total_time:.1f} gi√¢y")
        if success_count > 0:
            avg_time = total_time / success_count
            print(f"   üìà Trung b√¨nh/file: {avg_time:.1f} gi√¢y")
        
        # Th·ªëng k√™ dung l∆∞·ª£ng
        if size_before > 0 and size_after > 0:
            print(f"\nüíæ TH·ªêNG K√ä DUNG L∆Ø·ª¢NG:")
            size_before_mb = size_before / (1024 * 1024)
            size_after_mb = size_after / (1024 * 1024)
            compression_ratio = (size_after / size_before) * 100
            
            print(f"   üì• T·ªïng input: {size_before_mb:.1f} MB")
            print(f"   üì§ T·ªïng output: {size_after_mb:.1f} MB")
            print(f"   üìä T·ª∑ l·ªá n√©n: {compression_ratio:.1f}%")
            
            if compression_ratio < 100:
                savings = size_before_mb - size_after_mb
                print(f"   üí∞ Ti·∫øt ki·ªám: {savings:.1f} MB")
        
        # Th√¥ng tin output
        if success_count > 0:
            print(f"\nüìÅ FILES OUTPUT:")
            print(f"   üìÇ V·ªã tr√≠: Th∆∞ m·ª•c output ƒë√£ ch·ªâ ƒë·ªãnh")
            print(f"   üè∑Ô∏è ƒê·ªãnh d·∫°ng t√™n: *_filtered_{filter_name.lower()}_*")
            print(f"   üìã Quy t·∫Øc: [t√™n_g·ªëc]_filtered_[t√™n_filter]_[timestamp][ƒëu√¥i_file]")
        
        # Khuy·∫øn ngh·ªã
        print(f"\nüí° KHUY·∫æN NGH·ªä:")
        if error_count > 0:
            print(f"   ‚ö†Ô∏è {error_count} file l·ªói - ki·ªÉm tra ƒë·ªãnh d·∫°ng v√† quy·ªÅn truy c·∫≠p")
        
        if mode == 'fast' and success_count > 0:
            print(f"   üèÉ Ch·∫ø ƒë·ªô Fast - c√≥ th·ªÉ n√¢ng c·∫•p l√™n Quality ƒë·ªÉ ch·∫•t l∆∞·ª£ng t·ªët h∆°n")
        elif mode == 'quality':
            print(f"   üéØ Ch·∫ø ƒë·ªô Quality - ch·∫•t l∆∞·ª£ng t·ªëi ∆∞u ƒë√£ ƒë∆∞·ª£c √°p d·ª•ng")
        
        if total_time > 300:  # > 5 ph√∫t
            print(f"   üöÄ X·ª≠ l√Ω l√¢u - th·ª≠ ch·∫ø ƒë·ªô GPU ho·∫∑c Fast ƒë·ªÉ tƒÉng t·ªëc")
        
        print("=" * 70)