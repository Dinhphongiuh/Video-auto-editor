#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Voice Changer Action
Ch·ª©c nƒÉng auto thay ƒë·ªïi gi·ªçng n√≥i cho video
"""

import os
import tempfile
from .base_action import BaseAction
from .audio_processor import AudioProcessor
from .voice_effects import VoiceEffects


class VoiceChangerAction(BaseAction):
    """Action ƒë·ªÉ thay ƒë·ªïi gi·ªçng n√≥i trong video"""
    
    def __init__(self):
        super().__init__()
        self.audio_processor = AudioProcessor()
        self.voice_effects = VoiceEffects()
        
        # C√°c preset gi·ªçng n√≥i
        self.voice_presets = {
            "1": {
                "name": "Nam ‚Üí N·ªØ",
                "description": "Chuy·ªÉn gi·ªçng nam th√†nh n·ªØ",
                "pitch": "+300",
                "tempo": "1.1",
                "formant": "1.2"
            },
            "2": {
                "name": "N·ªØ ‚Üí Nam", 
                "description": "Chuy·ªÉn gi·ªçng n·ªØ th√†nh nam",
                "pitch": "-200",
                "tempo": "0.9",
                "formant": "0.8"
            },
            "3": {
                "name": "Robot",
                "description": "Gi·ªçng robot/m√°y m√≥c",
                "pitch": "0",
                "tempo": "1.0",
                "formant": "1.0",
                "effect": "robot"
            },
            "4": {
                "name": "Chipmunk",
                "description": "Gi·ªçng s√≥c chu·ªôt vui nh·ªôn",
                "pitch": "+500",
                "tempo": "1.3",
                "formant": "1.5"
            },
            "5": {
                "name": "Qu√°i v·∫≠t",
                "description": "Gi·ªçng qu√°i v·∫≠t ƒë√°ng s·ª£",
                "pitch": "-400",
                "tempo": "0.8",
                "formant": "0.6",
                "effect": "monster"
            },
            "6": {
                "name": "Echo",
                "description": "Th√™m hi·ªáu ·ª©ng echo",
                "pitch": "0",
                "tempo": "1.0", 
                "formant": "1.0",
                "effect": "echo"
            },
            "7": {
                "name": "Telephone",
                "description": "Gi·ªçng qua ƒëi·ªán tho·∫°i",
                "pitch": "0",
                "tempo": "1.0",
                "formant": "1.0",
                "effect": "telephone"
            },
            "8": {
                "name": "Reverb",
                "description": "Th√™m hi·ªáu ·ª©ng reverb",
                "pitch": "0",
                "tempo": "1.0",
                "formant": "1.0", 
                "effect": "reverb"
            },
            "custom": {
                "name": "T√πy ch·ªânh",
                "description": "T·ª± ƒëi·ªÅu ch·ªânh c√°c th√¥ng s·ªë"
            }
        }
    
    def show_voice_menu(self):
        """Hi·ªÉn th·ªã menu ch·ªçn gi·ªçng n√≥i"""
        print("\nüé§ CH·ªåN KI·ªÇU GI·ªåNG N√ìI:")
        print("-" * 50)
        
        for key, preset in self.voice_presets.items():
            if key != "custom":
                print(f"{key}. {preset['name']} - {preset['description']}")
        
        print(f"9. {self.voice_presets['custom']['name']} - {self.voice_presets['custom']['description']}")
        print("0. ‚Üê Quay l·∫°i")
        print("-" * 50)
    
    def get_voice_choice(self):
        """L·∫•y l·ª±a ch·ªçn gi·ªçng n√≥i t·ª´ user"""
        while True:
            choice = input("üëâ Ch·ªçn ki·ªÉu gi·ªçng (0-9): ").strip()
            
            if choice == "0":
                return None
            elif choice in self.voice_presets:
                return choice
            elif choice == "9":
                return "custom"
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Vui l√≤ng ch·ªçn t·ª´ 0-9.")
    
    def get_custom_settings(self):
        """L·∫•y th√¥ng s·ªë t√πy ch·ªânh t·ª´ user"""
        print("\nüéõÔ∏è T√ôY CH·ªàNH TH√îNG S·ªê GI·ªåNG N√ìI:")
        print("-" * 40)
        
        # Pitch (cao ƒë·ªô)
        while True:
            try:
                pitch_input = input("üéµ Pitch (-1000 ƒë·∫øn +1000, 0=kh√¥ng ƒë·ªïi): ").strip()
                if not pitch_input:
                    pitch = "0"
                    break
                pitch_value = int(pitch_input)
                if -1000 <= pitch_value <= 1000:
                    pitch = f"{pitch_value:+d}" if pitch_value != 0 else "0"
                    break
                else:
                    print("‚ùå Pitch ph·∫£i t·ª´ -1000 ƒë·∫øn +1000")
            except ValueError:
                print("‚ùå Vui l√≤ng nh·∫≠p s·ªë nguy√™n")
        
        # Tempo (t·ªëc ƒë·ªô)
        while True:
            try:
                tempo_input = input("‚ö° Tempo (0.5 ƒë·∫øn 2.0, 1.0=b√¨nh th∆∞·ªùng): ").strip()
                if not tempo_input:
                    tempo = "1.0"
                    break
                tempo_value = float(tempo_input)
                if 0.5 <= tempo_value <= 2.0:
                    tempo = str(tempo_value)
                    break
                else:
                    print("‚ùå Tempo ph·∫£i t·ª´ 0.5 ƒë·∫øn 2.0")
            except ValueError:
                print("‚ùå Vui l√≤ng nh·∫≠p s·ªë th·∫≠p ph√¢n")
        
        # Formant (√¢m v·ª±c)
        while True:
            try:
                formant_input = input("üé≠ Formant (0.5 ƒë·∫øn 2.0, 1.0=b√¨nh th∆∞·ªùng): ").strip()
                if not formant_input:
                    formant = "1.0"
                    break
                formant_value = float(formant_input)
                if 0.5 <= formant_value <= 2.0:
                    formant = str(formant_value)
                    break
                else:
                    print("‚ùå Formant ph·∫£i t·ª´ 0.5 ƒë·∫øn 2.0")
            except ValueError:
                print("‚ùå Vui l√≤ng nh·∫≠p s·ªë th·∫≠p ph√¢n")
        
        # Hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát
        print("\nüé® HI·ªÜU ·ª®NG ƒê·∫∂C BI·ªÜT:")
        print("1. Kh√¥ng c√≥")
        print("2. Robot")
        print("3. Echo")
        print("4. Reverb")
        print("5. Telephone")
        print("6. Monster")
        
        while True:
            effect_choice = input("üëâ Ch·ªçn hi·ªáu ·ª©ng (1-6): ").strip()
            effect_map = {
                "1": None,
                "2": "robot",
                "3": "echo", 
                "4": "reverb",
                "5": "telephone",
                "6": "monster"
            }
            if effect_choice in effect_map:
                effect = effect_map[effect_choice]
                break
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
        
        return {
            "name": "T√πy ch·ªânh",
            "description": f"Pitch: {pitch}, Tempo: {tempo}, Formant: {formant}",
            "pitch": pitch,
            "tempo": tempo,
            "formant": formant,
            "effect": effect
        }
    
    def apply_voice_change(self, input_file, output_file, preset_config):
        """√Åp d·ª•ng thay ƒë·ªïi gi·ªçng n√≥i cho m·ªôt video"""
        try:
            print(f"\nüé§ ƒêang x·ª≠ l√Ω: {os.path.basename(input_file)}")
            print(f"üé≠ Hi·ªáu ·ª©ng: {preset_config['name']}")
            
            # T·∫°o t√™n file t·∫°m
            with tempfile.TemporaryDirectory() as temp_dir:
                # Tr√≠ch xu·∫•t audio
                audio_file = os.path.join(temp_dir, "audio.wav")
                print("üì§ ƒêang tr√≠ch xu·∫•t audio...")
                
                if not self.audio_processor.extract_audio(input_file, audio_file):
                    print("‚ùå L·ªói khi tr√≠ch xu·∫•t audio")
                    return False
                
                # X·ª≠ l√Ω voice effect
                processed_audio = os.path.join(temp_dir, "processed_audio.wav")
                print("üéõÔ∏è ƒêang x·ª≠ l√Ω gi·ªçng n√≥i...")
                
                if not self.voice_effects.apply_voice_effect(audio_file, processed_audio, preset_config):
                    print("‚ùå L·ªói khi x·ª≠ l√Ω gi·ªçng n√≥i")
                    return False
                
                # K·∫øt h·ª£p v·ªõi video g·ªëc
                print("üé¨ ƒêang k·∫øt h·ª£p audio v·ªõi video...")
                
                if not self.audio_processor.combine_audio_video(input_file, processed_audio, output_file):
                    print("‚ùå L·ªói khi k·∫øt h·ª£p audio v·ªõi video")
                    return False
                
                print("‚úÖ Ho√†n th√†nh!")
                return True
                
        except Exception as e:
            print(f"‚ùå L·ªói x·ª≠ l√Ω file {input_file}: {e}")
            return False
    
    def execute(self, input_folder, output_folder):
        """Th·ª±c thi ch·ª©c nƒÉng thay ƒë·ªïi gi·ªçng n√≥i"""
        print("\nüé§ === THAY ƒê·ªîI GI·ªåNG N√ìI VIDEO ===")
        
        # Ki·ªÉm tra th∆∞ m·ª•c
        if not self.validate_folders(input_folder, output_folder):
            return
        
        # L·∫•y danh s√°ch video
        video_files = self.get_video_files(input_folder)
        if not video_files:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y file video n√†o trong th∆∞ m·ª•c: {input_folder}")
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
            return
        
        print(f"üìÅ T√¨m th·∫•y {len(video_files)} video(s)")
        for i, file in enumerate(video_files, 1):
            print(f"  {i}. {os.path.basename(file)}")
        
        # Hi·ªÉn th·ªã menu ch·ªçn gi·ªçng
        self.show_voice_menu()
        
        # L·∫•y l·ª±a ch·ªçn t·ª´ user
        choice = self.get_voice_choice()
        if choice is None:
            print("üö´ ƒê√£ h·ªßy thao t√°c")
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
            return
        
        # L·∫•y config preset
        if choice == "custom":
            preset_config = self.get_custom_settings()
        else:
            preset_config = self.voice_presets[choice]
        
        # X√°c nh·∫≠n x·ª≠ l√Ω
        print(f"\nüìä S·∫º X·ª¨ L√ù:")
        print(f"üé≠ Hi·ªáu ·ª©ng: {preset_config['name']}")
        print(f"üìù M√¥ t·∫£: {preset_config['description']}")
        print(f"üìÅ {len(video_files)} video(s)")
        
        confirm = input("\n‚ùì B·∫Øt ƒë·∫ßu x·ª≠ l√Ω? (y/n): ").strip().lower()
        if confirm != 'y':
            print("üö´ ƒê√£ h·ªßy thao t√°c")
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
            return
        
        # X·ª≠ l√Ω t·ª´ng video
        success_count = 0
        total_count = len(video_files)
        
        print(f"\nüöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω {total_count} video(s)...")
        print("=" * 60)
        
        for i, video_file in enumerate(video_files, 1):
            print(f"\nüìπ [{i}/{total_count}] ƒêang x·ª≠ l√Ω video...")
            
            # T·∫°o t√™n file output
            basename = os.path.splitext(os.path.basename(video_file))[0]
            extension = os.path.splitext(video_file)[1]
            voice_name = preset_config['name'].replace(' ', '_').replace('‚Üí', 'to')
            output_filename = f"{basename}_voice_{voice_name}{extension}"
            output_path = os.path.join(output_folder, output_filename)
            
            # X·ª≠ l√Ω
            if self.apply_voice_change(video_file, output_path, preset_config):
                success_count += 1
                print(f"‚úÖ L∆∞u t·∫°i: {output_filename}")
            else:
                print(f"‚ùå Th·∫•t b·∫°i: {os.path.basename(video_file)}")
            
            print("-" * 40)
        
        # K·∫øt qu·∫£
        print(f"\nüéä K·∫æT QU·∫¢ X·ª¨ L√ù:")
        print(f"‚úÖ Th√†nh c√¥ng: {success_count}/{total_count}")
        print(f"‚ùå Th·∫•t b·∫°i: {total_count - success_count}/{total_count}")
        print(f"üìÅ Th∆∞ m·ª•c output: {output_folder}")
        
        input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")