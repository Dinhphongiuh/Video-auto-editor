#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Config Manager
Qu·∫£n l√Ω c·∫•u h√¨nh cho c√°c ch·ª©c nƒÉng combo
"""


class ConfigManager:
    """Class ƒë·ªÉ c·∫•u h√¨nh t·ª´ng ch·ª©c nƒÉng trong combo"""
    
    def configure_function(self, function_key, available_functions):
        """C·∫•u h√¨nh chi ti·∫øt cho t·ª´ng ch·ª©c nƒÉng"""
        func_info = available_functions[function_key]
        action_name = func_info['action']
        
        print(f"\n‚öôÔ∏è C·∫§U H√åNH: {func_info['name']}")
        print("-" * 50)
        
        config = {}
        config_summary = ""
        
        if action_name == "format_converter":
            config, config_summary = self._configure_format_converter()
        elif action_name == "compressor":
            config, config_summary = self._configure_compressor()
        elif action_name == "speed_adjuster":
            config, config_summary = self._configure_speed_adjuster()
        elif action_name == "resolution_changer":
            config, config_summary = self._configure_resolution_changer()
        elif action_name == "filter_applier":
            config, config_summary = self._configure_filter_applier()
        elif action_name == "voice_changer":
            config, config_summary = self._configure_voice_changer()
        elif action_name == "video_trimmer":
            config, config_summary = self._configure_video_trimmer()
        
        if config:
            return {
                'key': function_key,
                'action': action_name,
                'config': config,
                'config_summary': config_summary
            }
        else:
            print("üö´ ƒê√£ h·ªßy c·∫•u h√¨nh ch·ª©c nƒÉng n√†y")
            return None
    
    def _configure_format_converter(self):
        """C·∫•u h√¨nh format converter"""
        print("üìπ Ch·ªçn ƒë·ªãnh d·∫°ng output:")
        print("1. MP4 (Recommended)")
        print("2. AVI")
        print("3. MOV")
        print("4. MKV")
        print("0. H·ªßy")
        
        choice = input("üëâ Ch·ªçn (0-4): ").strip()
        format_map = {"1": "mp4", "2": "avi", "3": "mov", "4": "mkv"}
        
        if choice in format_map:
            format_type = format_map[choice]
            return {"format": format_type, "choice": choice}, f"Format: {format_type.upper()}"
        return None, ""
    
    def _configure_compressor(self):
        """C·∫•u h√¨nh compressor"""
        print("üóúÔ∏è Ch·ªçn m·ª©c n√©n:")
        print("1. N√©n nh·∫π (ch·∫•t l∆∞·ª£ng cao)")
        print("2. N√©n v·ª´a (c√¢n b·∫±ng)")
        print("3. N√©n m·∫°nh (dung l∆∞·ª£ng nh·ªè)")
        print("0. H·ªßy")
        
        choice = input("üëâ Ch·ªçn (0-3): ").strip()
        quality_map = {"1": "high", "2": "medium", "3": "low"}
        
        if choice in quality_map:
            quality = quality_map[choice]
            return {"quality": quality, "choice": choice}, f"Ch·∫•t l∆∞·ª£ng: {quality}"
        return None, ""
    
    def _configure_speed_adjuster(self):
        """C·∫•u h√¨nh speed adjuster"""
        print("‚ö° Ch·ªçn t·ªëc ƒë·ªô:")
        print("1. 0.5x (Ch·∫≠m)")
        print("2. 1.5x (Nhanh v·ª´a)")
        print("3. 2.0x (Nhanh)")
        print("4. T√πy ch·ªânh")
        print("0. H·ªßy")
        
        choice = input("üëâ Ch·ªçn (0-4): ").strip()
        
        if choice == "1":
            return {"speed": 0.5, "choice": "1"}, "T·ªëc ƒë·ªô: 0.5x"
        elif choice == "2":
            return {"speed": 1.5, "choice": "2"}, "T·ªëc ƒë·ªô: 1.5x"
        elif choice == "3":
            return {"speed": 2.0, "choice": "3"}, "T·ªëc ƒë·ªô: 2.0x"
        elif choice == "4":
            try:
                speed = float(input("Nh·∫≠p t·ªëc ƒë·ªô (0.1-4.0): "))
                if 0.1 <= speed <= 4.0:
                    return {"speed": speed, "choice": "4", "custom_speed": speed}, f"T·ªëc ƒë·ªô: {speed}x"
                else:
                    print("‚ùå T·ªëc ƒë·ªô kh√¥ng h·ª£p l·ªá")
            except ValueError:
                print("‚ùå Vui l√≤ng nh·∫≠p s·ªë")
        
        return None, ""
    
    def _configure_resolution_changer(self):
        """C·∫•u h√¨nh resolution changer"""
        print("üìê Ch·ªçn ƒë·ªô ph√¢n gi·∫£i:")
        print("1. 720p (HD)")
        print("2. 1080p (Full HD)")
        print("3. 480p (SD)")
        print("0. H·ªßy")
        
        choice = input("üëâ Ch·ªçn (0-3): ").strip()
        resolution_map = {"1": "720p", "2": "1080p", "3": "480p"}
        
        if choice in resolution_map:
            resolution = resolution_map[choice]
            return {"resolution": resolution, "choice": choice}, f"ƒê·ªô ph√¢n gi·∫£i: {resolution}"
        return None, ""
    
    def _configure_filter_applier(self):
        """C·∫•u h√¨nh filter applier"""
        print("üé® Ch·ªçn b·ªô l·ªçc:")
        print("1. Vintage (C·ªï ƒëi·ªÉn)")
        print("2. Cinematic (ƒêi·ªán ·∫£nh)")
        print("3. Vibrant (S·ªëng ƒë·ªông)")
        print("4. Black & White (ƒêen tr·∫Øng)")
        print("0. H·ªßy")
        
        choice = input("üëâ Ch·ªçn (0-4): ").strip()
        filter_map = {"1": "vintage", "2": "cinematic", "3": "vibrant", "4": "black_white"}
        
        if choice in filter_map:
            filter_type = filter_map[choice]
            return {"filter": filter_type, "choice": choice}, f"B·ªô l·ªçc: {filter_type}"
        return None, ""
    
    def _configure_voice_changer(self):
        """C·∫•u h√¨nh voice changer"""
        print("üé§ Ch·ªçn hi·ªáu ·ª©ng gi·ªçng:")
        print("1. Nam ‚Üí N·ªØ")
        print("2. N·ªØ ‚Üí Nam")
        print("3. Robot")
        print("4. Chipmunk")
        print("0. H·ªßy")
        
        choice = input("üëâ Ch·ªçn (0-4): ").strip()
        voice_names = {"1": "Nam‚ÜíN·ªØ", "2": "N·ªØ‚ÜíNam", "3": "Robot", "4": "Chipmunk"}
        
        if choice in voice_names:
            return {"voice_preset": choice, "choice": choice}, f"Gi·ªçng: {voice_names[choice]}"
        return None, ""
    
    def _configure_video_trimmer(self):
        """C·∫•u h√¨nh video trimmer"""
        print("‚úÇÔ∏è Ch·ªçn ki·ªÉu c·∫Øt:")
        print("1. C·∫Øt t·ª´ ƒë·∫ßu video")
        print("2. C·∫Øt t·ª´ cu·ªëi video")
        print("0. H·ªßy")
        
        trim_choice = input("üëâ Ch·ªçn (0-2): ").strip()
        
        if trim_choice in ["1", "2"]:
            try:
                seconds = float(input("Nh·∫≠p s·ªë gi√¢y c·∫ßn c·∫Øt: "))
                if seconds > 0:
                    trim_type = "start" if trim_choice == "1" else "end"
                    return {
                        "trim_type": trim_type, 
                        "seconds": seconds,
                        "choice": trim_choice
                    }, f"C·∫Øt {seconds}s t·ª´ {'ƒë·∫ßu' if trim_type == 'start' else 'cu·ªëi'}"
                else:
                    print("‚ùå S·ªë gi√¢y ph·∫£i > 0")
            except ValueError:
                print("‚ùå Vui l√≤ng nh·∫≠p s·ªë")
        
        return None, ""