#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Video Format Converter Action - S·ª≠ d·ª•ng FFmpeg tr·ª±c ti·∫øp
X·ª≠ l√Ω chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng video
"""

import os
import subprocess
from .base_action import BaseAction


class VideoFormatConverter(BaseAction):
    """X·ª≠ l√Ω chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng video b·∫±ng FFmpeg tr·ª±c ti·∫øp"""
    
    SUPPORTED_FORMATS = ["mp4", "avi", "mov", "wmv", "flv", "mkv", "webm"]
    
    # Format configurations for FFmpeg
    FORMAT_CONFIGS = {
        "mp4": {
            "container": "mp4",
            "video_codec": "libx264",
            "audio_codec": "aac"
        },
        "avi": {
            "container": "avi", 
            "video_codec": "libx264",
            "audio_codec": "mp3"
        },
        "mov": {
            "container": "mov",
            "video_codec": "libx264", 
            "audio_codec": "aac"
        },
        "wmv": {
            "container": "asf",
            "video_codec": "wmv2",
            "audio_codec": "wmav2"
        },
        "flv": {
            "container": "flv",
            "video_codec": "libx264",
            "audio_codec": "aac"
        },
        "mkv": {
            "container": "matroska",
            "video_codec": "libx264",
            "audio_codec": "aac"
        },
        "webm": {
            "container": "webm",
            "video_codec": "libvpx-vp9",
            "audio_codec": "libopus"
        }
    }
    
    def execute(self, input_folder, output_folder):
        """Th·ª±c hi·ªán chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng video"""
        # Ki·ªÉm tra th∆∞ m·ª•c
        if not self.validate_folders(input_folder, output_folder):
            return
        
        # L·∫•y danh s√°ch video
        video_files = self.get_video_files(input_folder)
        if not video_files:
            print("‚ùå Kh√¥ng t√¨m th·∫•y file video n√†o!")
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
            return
        
        print(f"\nüìπ CHUY·ªÇN ƒê·ªîI ƒê·ªäNH D·∫†NG VIDEO")
        print(f"T√¨m th·∫•y {len(video_files)} file video")
        
        # Ki·ªÉm tra FFmpeg
        if not self._check_ffmpeg():
            print("‚ùå FFmpeg kh√¥ng kh·∫£ d·ª•ng! Vui l√≤ng c√†i ƒë·∫∑t FFmpeg.")
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
            return
        
        # Ch·ªçn ƒë·ªãnh d·∫°ng output
        output_format = self._select_output_format()
        if not output_format:
            return
        
        # Th·ª±c hi·ªán chuy·ªÉn ƒë·ªïi
        print(f"\nüîÑ ƒêang chuy·ªÉn ƒë·ªïi sang {output_format.upper()}...")
        print(f"S·ªë file c·∫ßn x·ª≠ l√Ω: {len(video_files)}")
        print("-" * 50)
        
        success_count = 0
        error_count = 0
        
        for i, video_file in enumerate(video_files, 1):
            filename = os.path.basename(video_file)
            name, _ = os.path.splitext(filename)
            output_file = os.path.join(output_folder, f"{name}.{output_format}")
            
            print(f"\n[{i}/{len(video_files)}] üìÅ X·ª≠ l√Ω: {filename}")
            print(f"  üìç Input : {video_file}")
            print(f"  üì§ Output: {output_file}")
            
            # Ki·ªÉm tra file input t·ªìn t·∫°i
            if not os.path.exists(video_file):
                print(f"  ‚ùå L·ªói: File input kh√¥ng t·ªìn t·∫°i!")
                error_count += 1
                continue
            
            try:
                # Ki·ªÉm tra tr·∫°ng th√°i tr∆∞·ªõc khi ch·∫°y
                file_size = os.path.getsize(video_file) / (1024 * 1024)  # MB
                print(f"  üìÄ K√≠ch th∆∞·ªõc file: {file_size:.2f} MB")
                print(f"  üîÑ Chuy·ªÉn ƒë·ªïi sang ƒë·ªãnh d·∫°ng: {output_format.upper()}")
                
                # Chuy·ªÉn ƒë·ªïi b·∫±ng FFmpeg tr·ª±c ti·∫øp
                if self._convert_with_ffmpeg(video_file, output_file, output_format):
                    output_size = os.path.getsize(output_file) / (1024 * 1024)
                    print(f"  ‚úÖ Th√†nh c√¥ng! K√≠ch th∆∞·ªõc output: {output_size:.2f} MB")
                    success_count += 1
                else:
                    print(f"  ‚ùå L·ªói: Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi!")
                    error_count += 1
                    
            except Exception as e:
                print(f"  ‚ùå L·ªói: {e}")
                error_count += 1
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        self._show_results(success_count, error_count, len(video_files), output_format)
        input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
    
    def _check_ffmpeg(self):
        """Ki·ªÉm tra FFmpeg c√≥ kh·∫£ d·ª•ng kh√¥ng"""
        try:
            result = subprocess.run(['ffmpeg', '-version'], 
                                  capture_output=True, text=True)
            return result.returncode == 0
        except:
            return False
    
    def _convert_with_ffmpeg(self, input_file, output_file, output_format):
        """Chuy·ªÉn ƒë·ªïi video b·∫±ng FFmpeg tr·ª±c ti·∫øp"""
        try:
            # L·∫•y configuration cho format
            config = self.FORMAT_CONFIGS.get(output_format, self.FORMAT_CONFIGS["mp4"])
            
            # T·∫°o FFmpeg command
            cmd = [
                'ffmpeg',
                '-i', input_file,
                '-c:v', config['video_codec'],
                '-c:a', config['audio_codec'],
                '-f', config['container'],
                '-y',  # Overwrite output
                output_file
            ]
            
            print(f"  üîß FFmpeg Command: {' '.join(cmd)}")
            
            # Ch·∫°y FFmpeg
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                return True
            else:
                print(f"  ‚ùå FFmpeg Error: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"  ‚ùå L·ªói khi ch·∫°y FFmpeg: {e}")
            return False
    
    def _select_output_format(self):
        """Cho ph√©p user ch·ªçn ƒë·ªãnh d·∫°ng output"""
        print("\nCh·ªçn ƒë·ªãnh d·∫°ng output:")
        for i, fmt in enumerate(self.SUPPORTED_FORMATS, 1):
            print(f"{i}. {fmt.upper()}")
        
        try:
            choice = int(input("Nh·∫≠p s·ªë: ")) - 1
            if 0 <= choice < len(self.SUPPORTED_FORMATS):
                return self.SUPPORTED_FORMATS[choice]
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
                return None
                
        except ValueError:
            print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
            return None
    
    def _show_results(self, success_count, error_count, total_count, output_format):
        """Hi·ªÉn th·ªã k·∫øt qu·∫£ x·ª≠ l√Ω"""
        print("\n" + "=" * 50)
        print(f"üèÅ K·∫øt qu·∫£ chuy·ªÉn ƒë·ªïi:")
        print(f"  ‚úÖ Th√†nh c√¥ng: {success_count}/{total_count}")
        print(f"  ‚ùå L·ªói: {error_count}/{total_count}")
        print(f"  üìπ ƒê·ªãnh d·∫°ng: {output_format.upper()}")
        if success_count > 0:
            print(f"  üìÅ V·ªã tr√≠ output: ƒê√£ l∆∞u v·ªõi ƒë·ªãnh d·∫°ng .{output_format}")
        print("=" * 50)